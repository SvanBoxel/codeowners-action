{"version":3,"sources":["/webpack/bootstrap","../lib/main.js","../external \"fs\""],"names":[],"mappings":";;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAI;AACJ;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;AC3Ca;AACb;AACA,2BAA2B,+DAA+D,gBAAgB,EAAE,EAAE;AAC9G;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,qFAAqF;AACpH;AACA,KAAK;AACL;AACA;AACA,4CAA4C;AAC5C;AACA,sBAAsB,OAAO,iBAAiB,cAAc;AAC5D,6BAA6B,mBAAO,CAAC,GAAI;AACzC;AACA;AACA;AACA;AACA,yCAAyC,oBAAoB;AAC7D;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,IAAI;AAClB;AACA,mCAAmC,GAAG;AACtC;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,KAAK;AACL;AACA;;;;;;;;ACnDA,+B","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t__webpack_require__.ab = __dirname + \"/\";\n\n \t// the startup function\n \tfunction startup() {\n \t\t// Load entry module and return exports\n \t\treturn __webpack_require__(109);\n \t};\n\n \t// run startup\n \treturn startup();\n","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs_1 = __importDefault(require(\"fs\"));\nconst codeowners_re = new RegExp('^[^#](.*)$', 'mg');\nfunction getFileContents(file) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            fs_1.default.readFile(file, { encoding: 'utf-8' }, (err, data) => {\n                if (err)\n                    reject(err);\n                resolve(data);\n            });\n        });\n    });\n}\nfunction run() {\n    return __awaiter(this, void 0, void 0, function* () {\n        // try {\n        const CodeOwnersContents = yield getFileContents('./LICENSE');\n        console.log(CodeOwnersContents);\n        //   const lines = CodeOwnersContents.match(codeowners_re);\n        //   return lines.reduce((acc, cur) => {\n        //     const [key, value] = cur.split(/(?<=^\\S+)\\s/);\n        //     console.log(value);\n        //     if (!key || !value) return acc;\n        //     acc[key] = value.split(/ /);\n        //     return acc;\n        //   }, {});\n        //   const ms: string = core.getInput('milliseconds')\n        //   core.debug(`Waiting ${ms} milliseconds ...`) // debug is only output if you set the secret `ACTIONS_RUNNER_DEBUG` to true\n        //   core.debug(new Date().toTimeString())\n        //   await wait(parseInt(ms, 10))\n        //   core.debug(new Date().toTimeString())\n        //   core.setOutput('time', new Date().toTimeString())\n        // } catch (error) {\n        //   core.setFailed(error.message)\n        // }\n    });\n}\nrun();\n","module.exports = require(\"fs\");"],"sourceRoot":""}